#include <stdio.h>
#include <malloc.h>
#define INF 9999

void Dijkstra(int vertex, int r);
int extractMin();

struct queue{
 int *data;
 int front;
 int rear;
}queue;

int **w;
int *d;
int *prev;

int main(void){
 int vertex = 0;
 int edge;
 int r = 0;
 int t = 0;
 int i, j, k, l;
 int x = 0;
 int y = 0;
 int weight = 0;

scanf("%d %d", &vertex, &edge);

 w = (int**)malloc(sizeof(int*)*vertex);
 d = (int*)malloc(sizeof(int*)*vertex);
 prev = (int*)malloc(sizeof(int*)*vertex);
 queue.data = (int*)malloc(sizeof(int*)*vertex);

 for(k=0; k<vertex ;k++){
  *(w+k) = (int *)malloc(sizeof(int)*vertex);
  for(l=0; l<vertex ;l++){
   *(*(w+k)+l) = 0;
  }
 }
 for(i=0; i<edge ;i++){
scanf("%d %d %d", &x, &y, &weight);
w[x-1][y-1] = weight;
 }
scanf("%d %d", &r, &t);
Dijkstra(vertex,r-1);

for(j=0; j<=y+ 1;j++)
printf("%d ",prev[j]+1);

if(d[t-1]==INF)printf("Impossible");
else{printf("%d",d[t-1]);
 }
return 0;
}

void Dijkstra(int vertex, int r){
 int v = 0;
 int u = 0;

 for(v=0; v<vertex ;v++){
  d[v]  = INF;
  prev[v] = -1;
 }
 d[r] = 0;
 for(v=0; v<vertex ;v++){
   queue.data[queue.rear++] = v;
 }
 while(queue.front != queue.rear){
  u = extractMin(); 

  for(v=0; v<vertex ;v++){
   if(w[u][v]!=0){
  if((d[u] + w[u][v]) < d[v]){
  d[v] = d[u] + w[u][v];
  prev[v] = u;
 }
   }
  }
 }
}

int extractMin(){
 int i,min = INF;
 int j = 0;
 int v = 0;
 int prev, temp;

 for(i=queue.front ; i<queue.rear ; i++){
  if(d[queue.data[i]]<min){
   min = d[queue.data[i]];
   v = queue.data[i];
   j = i;
  }
 }
 queue.data[j] = queue.data[queue.front];
 queue.front++;
 
 return v;
}

/*
Dijkstra
Contents
 음의 가중치가 없는 단방향 그래프와 시작점과 도착점이 주어졌을 때, 시작점에서 도착점까지의 가장 최단 거리를 구하는 여러 알고리즘 중에 Dijkstra's Algorithm이 있다. 알고리즘의 의사 코드는 다음과 같다.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Dijkstra(G, r)
{
   S = empty; //S는 정점 집합
   for each u ∈V
      d[u] = INF
   d[r] = 0
   while(S!=V){
      u = extractMin(V-S, d); ---(1)
      for each v ∈ Adj(u)
         if(v ∈ V-S and d[u] + w(u, v) < d[v]){
            d[v] = d[u] + w(u, v);
            prev[v] = u;
         }
   }
   return d[t];   
}
 위 Dijkstra 알고리즘을 구현하고, 조건에 맞게 출력하시오. 

※ 이완 조건(Relaxation condition)은 d[u] + w(u, v) < d[v]로 한다.

 

Input
입력의 첫줄은 n과 m이 들어온다. n은 노드의 수이고 노드는 1부터 n까지 있다. m은 간선의 수를 나타낸다.

다음 m 줄에는 간선(x, y, w)이 들어온다. x는 시작점 y는 도착점 w는 그 간선의 가중치를 나타낸다.

마지막 줄에는 출발 노드 r와 도착 노드 t가 들어 온다. 

Output
1부터 n까지 prev값을 순서대로 출력하고 마지막에, r에서 t까지의 최단 거리(Shortest path's distance)를 출력한다. 각 숫자는 빈칸으로 분리되어야 한다.

만일 r에서 t까지 이르는 경로가 없다면 Impossible을 최단 거리 대신 출력한다.

Sample Input 1
8 14
1 2 8
1 4 9
1 3 11
2 5 10
3 6 8
3 7 8
4 2 6
4 3 3
4 5 1
5 8 2
6 7 7
7 4 12
7 8 5
8 6 4
1 7
Sample Output 1
0 1 1 1 4 8 3 5 19

 

Sample Input 2
8 14
1 2 8
1 4 9
1 3 11
2 5 10
3 6 8
3 7 8
4 2 6
4 3 3
4 5 1
5 8 2
6 7 7
7 4 12
7 8 5
8 6 4
8 1
Sample Output 2
0 4 4 7 4 8 6 0 Impossible

*/